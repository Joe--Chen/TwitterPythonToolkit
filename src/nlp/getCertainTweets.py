# -*- coding: utf-8 -*-
"""
	@
	@Description:   This script finds and stores tweets based on certain creteria
    @               
    @Author:        Joe Chen
    @Last modified: 10/28/2015 

"""
import time
import json
from pymongo import MongoClient
import datetime
import imp
import random

def NoOp(arg):
	return True

def getter(collection, modulename=None, filename="AlltweetsNoOp.json"):
    """get and store tweets based on a given function"""
    count = 0
    print "total number of tweets in this database is ", collection.find().count()
    # open a new file   ###
    outfile = open(filename, "w")
    # according to the json list format 
    outfile.write("[")
    if modulename == None:
    	option = NoOp
    else:
    	module = imp.load_source('module.name', modulename)
        option = module.check

	for tweet in collection.find():
			count += 1
			if count % 5000 == 0:
				print count
			if option(tweet):
				tweet.pop(u'_id', None)
				json.dump(tweet, outfile, indent = 4)
				outfile.write(",")

    # close all files
    outfile.seek(-1, 1)
    outfile.write("]")
    outfile.close() 
    print "finish writing to the file"

def randomprint(collection, modulename=None, num = 300):
    """get and store tweets based on a given function"""
    count = 0
    print "total number of tweets in this database is ", collection.find().count()
    if modulename == None:
    	option = NoOp
    else:
    	module = imp.load_source('module.name', modulename)
        option = module.check
	# probability that one tweet will be printed out
	total = 28360
	# number of tweets printed
	accu = 0
	for tweet in collection.find():
			count += 1
			# if count % 5000 == 0:
				# print count
			if option(tweet):
				prob = random.randint(1, 2)
				if prob <= total - num:
					accu += 1
					print " --------------------------- Tweet ", accu, " ---------------------------"
					print tweet[u'text'].encode("utf-8", "ignore")
					print tweet[u'created_at']
					print tweet[u'user'][u'screen_name'].encode("utf-8", "ignore"), " | ", tweet[u'user'][u'name'].encode("utf-8", "ignore"), " | ", tweet[u'user'][u'description'].encode("utf-8", "ignore")
					print 
	print "finish searching all tweets"

def withhelduser(collection):
	count = 0
	withuser = set([])
	for tweet in collection.find():
			count += 1
			if count % 5000 == 0:
				print count
			try:
				if "TR" in tweet[u'user'][u'withheld_in_countries']:
					if tweet[u'user']['id'] not in withuser:
						print tweet[u'user']['id']
						withuser.add(tweet[u'user']['id'])
			except:
				continue
	print len(withuser)
	print withuser

def comparewithuser():
	api = set([2260094977L, 2731534341L, 1198835713, 2982675731L, 399308300, 3329327533L, 1561567248, 854414354, 226153494, 2971370008L, 3402723353L, 2324177946L, 2511233055L, 2882277809L, 1104046632, 486051369, 845909546, 3129314311L, 110765613, 763632175, 2850307120L, 476129032, 2721640627L, 2866130302L, 2758156856L, 2880136249L, 3060195898L, 3422949437L, 321693960, 3364479551L, 2257902144L, 3401486913L, 2932835906L, 161037892, 3432704584L, 1860629066, 895169611, 321283148, 388821075, 3320586836L, 2893842586L, 3432964695L, 3149317209L, 338459738, 761966095, 2910107578L, 1634200159, 487660641, 2225934435L, 2282535014L, 2427695208L, 708070508, 1112981522, 3388179645L, 516578419, 418664573, 2575621397L, 1288647019, 3038611588L, 83669126, 3020659335L, 1582848648, 2938117259L, 900525506, 1468619406, 3382954127L, 463253648, 152621713, 2383857810L, 3104648854L, 414128153, 383660696, 92986521, 511546010, 2956725915L, 2313947624L, 2821230753L, 2464744725L, 2693834406L, 55931558, 256969897, 2808943270L, 3310244013L, 804198577, 2834556083L, 215943860, 268051742, 85609142, 705236152, 3088416441L, 3390554301L, 2812001471L, 398196674, 2459516192L, 3296159942L, 3431620815L, 1455611089, 3421345493L, 2678973661L, 283439909, 299287265, 2792222948L, 1960960231, 2787092860L, 2996805866L, 3418805483L, 2365751532L, 388287016, 108902130, 1485058292, 3397389557L, 2873735931L, 2719756028L, 2948934911L, 3426694402L, 3431181573L, 435022913, 2438241031L, 3302784776L, 94900489, 594846987, 3312091571L, 2497534509L, 3398828147L, 2612009235L, 2604234517L, 1327447831, 1927671576, 398998297, 2518761755L, 3431544094L, 408618373, 1149341984, 3217159971L, 3394717989L, 3414845225L, 2907606317L, 2293151024L, 3291829554L, 3157860147L, 2700939031L, 2734487861L, 2403119414L, 2816108855L, 2356447032L, 605743417, 773522234, 1972824632, 428841793, 980101447, 3419982664L, 864677707, 2160688460L, 3398538064L, 3423770680L, 108722820, 427721047, 2907405028L, 223401306, 3217675611L, 3397747552L, 2269410145L, 1524713827, 261414756, 1455117540, 3389645158L, 607312231, 337634665, 3332897123L, 2800030829L, 3333352816L, 3177141105L, 551362418, 587547516, 3419559293L, 841532286, 2797001602L, 2198510467L, 1096976022, 111437703, 222564497, 405387961, 559363470, 3037836688L, 2965856032L, 499595164, 366134685, 1679318942, 2849218976L, 3004110245L, 413155245, 86665649, 3173184947L, 3346158010L, 2405348796L, 506546621, 383634366, 3371515840L, 2483631042L, 2870950346L, 2190516172L, 553083855, 450227667, 193658840, 496123353, 2471859675L, 2849619365L, 2857575905L, 1288644836, 1898068646, 540353510, 2744836071L, 3454996456L, 3298522603L, 2837399020L, 3074858477L, 968276462, 1632669680, 1534842866, 3402304499L, 3397602293L, 3296027126L, 451604988])
	me = set([2260094977, 2731534341, 1198835713, 427721047, 399308300, 761966095, 1561567248, 1112981522, 2971370008, 414128153, 2324177946, 2511233055, 1104046632, 486051369, 845909546, 3129314311, 2497534509, 763632175, 2850307120, 476129032, 2721640627, 2866130302, 2758156856, 2880136249, 3060195898, 2198510467, 3422949437, 3364479551, 2257902144, 435022913, 2932835906, 161037892, 3432704584, 1860629066, 895169611, 321283148, 388821075, 3320586836, 3432964695, 3149317209, 338459738, 2910107578, 1634200159, 2483631042, 487660641, 2225934435, 2282535014, 2427695208, 708070508, 854414354, 3390554301, 516578419, 418664573, 2604234517, 108722820, 83669126, 3020659335, 1582848648, 2700939031, 398196674, 1468619406, 3382954127, 463253648, 152621713, 2383857810, 3104648854, 3402723353, 383660696, 2893842586, 2956725915, 2821230753, 2464744725, 2693834406, 256969897, 2808943270, 3310244013, 804198577, 2834556083, 215943860, 3431544094, 85609142, 705236152, 405387961, 2459516192, 3388179645, 2812001471, 2965856032, 3296159942, 3431620815, 1455611089, 3421345493, 2678973661, 299287265, 1016020195, 2907405028, 1960960231, 2787092860, 2996805866, 3418805483, 2365751532, 3302784776, 388287016, 108902130, 1485058292, 3397389557, 2873735931, 2719756028, 2948934911, 3426694402, 3431181573, 2438241031, 321693960, 94900489, 594846987, 3312091571, 2982675731, 2575621397, 1327447831, 1927671576, 398998297, 2518761755, 3038611588, 268051742, 1149341984, 3217159971, 3394717989, 3414845225, 111437703, 2907606317, 2612009235, 2293151024, 3291829554, 3157860147, 2734487861, 2403119414, 2816108855, 2356447032, 605743417, 773522234, 3298522603, 428841793, 2938117259, 3419982664, 864677707, 2160688460, 3398538064, 1972824632, 3423770680, 2792222948, 223401306, 3397747552, 2269410145, 3332897123, 261414756, 1455117540, 3389645158, 607312231, 337634665, 1288647019, 2800030829, 3333352816, 3177141105, 551362418, 1963313012, 587547516, 3419559293, 841532286, 2797001602, 3398828147, 408618373, 3401486913, 222564497, 559363470, 3037836688, 499595164, 511546010, 1679318942, 2849218976, 2849619365, 3088416441, 3329327533, 366134685, 2882277809, 3173184947, 3454996456, 3346158010, 2405348796, 506546621, 383634366, 3371515840, 900525506, 2870950346, 2190516172, 1096976022, 553083855, 450227667, 193658840, 496123353, 2471859675, 3004110245, 2857575905, 1288644836, 55931558, 540353510, 2744836071, 2313947624, 1524713827, 2837399020, 3074858477, 968276462, 1632669680, 1534842866, 3402304499, 3397602293, 3296027126, 451604988])
	print len(api)
	print len(me)
	print len(api.intersection(me))
	# answer: 214 same users

if __name__ == '__main__':
	comparewithuser()
	exit()
	client = MongoClient()
	db = client.TE
	collection = db.election
	# getter(collection, "/Users/zc/Documents/twitter_research/twitterpythontoolkit/src/nlp/checkword.py")
	# withhelduser(collection)
	randomprint(collection, "/Users/zc/Documents/twitter_research/twitterpythontoolkit/src/nlp/checkword.py")
