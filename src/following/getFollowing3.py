#part of the code is credit to thid resource http://coding2day.com/TwitterPython.pdf
"""
    @
    @Description:   This python script retrieves all tweets (up tp 3200) from a list of users
    @               and stores those tweets into a txt file.
    @             
    @Author:        Joe Chen
    @Last modified: 05/19/2015 
"""

import time
import json
import urllib2
import oauth2


# 1)from (r.t)
# consumer = oauth2.Consumer(key="TWRBSpgSMkEjzcdpcyZxBX01X", secret="lyzpMfOfQXi9wzSl2KcPtqtHdcEuklCrAtQBI7y5DdUw1vVS2Q")
# token = oauth2.Token(key="2427867182-uNdht7AKnyBIfovdPP36Ly7QPFxiPYQxDUK9v9M", secret="y8u8Tl0sT1pQHJben60EIpaqVVPcVbDTEQjEpEZVjORiW")

# 2)from Joe Chen
consumer = oauth2.Consumer(key="CuyDAqUbCTF6y6k6mcoGF8owZ", secret="OucJJMnHbYCVNKNgyEJSNBMWBXapwSGuwy1Xc28mXR5vLixrNQ")
token = oauth2.Token(key="1979279791-8qRguXNd21mgHR8khU9hg8rcyXkHHSE65tkwFlv", secret="HIR4DQEyHVPrvXm2XNsTToVcgIgxWM2WR2eOoaY1iJV6R")

# 3)from Joe Chen, another one
consumer = oauth2.Consumer(key="z4k1E4pOj8ncQ4MAdjY1r1Ty9", secret="92mLHrYChG5sHRdZsUc90JG7RRh8cewrl5Hjf2IoPunCAL8HRz")
token = oauth2.Token(key="1979279791-tSDamC8WUIxU9Z8uFnkWe5eLNSUlGYhGu8l5zZ1", secret="FNMSlsqgcIRmjeCf0BqD9TamwAD1ZfMC77n0x0cOpsICZ")

# 4) name: summer research project
# consumer = oauth2.Consumer(key="Vsj9hKjxGPk4JxBj4al3i7JHX", secret="TbPwe5ltq7U4GtaeMtUhyMxxYb6jNvgyXWZsGsjKqcxbZCFhbD")
# token = oauth2.Token(key="1979279791-c9yR5GJlLrg78jTIifIckvllZf8NBRl8K5aU8OZ", secret="FHuPvdPcbU3Xu77I44pqc64FmLGh82Bkftgq0xwqmRHhR")
#resource https://dev.twitter.com/rest/reference/get/statuses/user_timeline 

# 5) another one from (r.t)
# consumer = oauth2.Consumer(key="7UdhFCq7yb4mA4li0oALa21gY", secret="T9mi5ncQYvzG7BJTULg7HMu6JtCO9dKuFRBf27hphADmqSY5Dp")
# token = oauth2.Token(key="2427867182-uAO0GYXdCma0lHHAYEFZ7xsh2Q4RgKczAGEQ0XM", secret="uszLj4dpKqqDZZq8MZzpHPWxJ8xYrFqhQbfXl48iYjlFR")


APIUrl='https://api.twitter.com/1.1/followers/ids.json'


## because json.dump can be called only once, ALL_data is a list that stores all tweets
#user_map = {}
#allusers = [152441856, 1222903296, 466671618, 344569347, 613682180, 558454789, 578423303, 2344193034L, 834953227, 615864844, 844310274, 89022992, 543388760, 929938435, 1444655126, 2772833815L, 245173212, 980941849, 890080284, 821331486, 620296965, 32408612, 2475286316L, 380329513, 494009898, 1937106475, 134224940, 250147885, 2668972591L, 760957490, 18138164, 343221086, 2399241728L, 3078921, 2212419642L, 249511995, 225726730, 296493118, 222155852, 479230017, 572737928, 2596781636L, 703086523, 2349696973L, 633849931, 2296308812L, 1350084686, 87384143, 445774416, 300750417, 14493027, 2835304020L, 2599776342L, 25237079, 477811288, 469619289, 606281620, 2242439771L, 578277980, 224687417, 1692261986, 517631587, 288093542, 350968935, 2521870855L, 2464475908L, 980960875, 1249556076, 1466274925, 94771822, 108374127, 1722848880, 2324350056L, 172064882, 60570739, 417564276, 503676533, 16485764, 1498746487, 731636346, 2468358268L, 14584447, 256702081, 14215299, 182176389, 156958343, 154588808, 2421721740L, 71464898, 66581134, 2674087567L, 558779223, 65724344, 1169751188, 2493044713L, 2254871191L, 15268506, 1254696428, 2754247836L, 590312609, 1570080396, 449036455, 49172648, 791786665, 2466145962L, 2221631875L, 1527819950, 435502255, 932944561, 2464708274L, 1108426099, 465446581, 606698678, 2375694327L, 2793148179L, 1007486137, 270061599, 214237884, 1345488061, 75193022, 28888215, 2713973953L, 798582200, 1570200775, 56421576, 21608650, 374556279, 558521037, 1134019021, 2536649936L, 226146514, 158059731, 109491412, 136736469, 1303136983, 2188186329L, 2499540698L, 515447515, 754129117, 1383135966, 2494345951L, 1904352720, 269360866, 2688572791L, 400452836, 494664486, 330038503, 983395976, 14407914, 2756408664L, 55143812, 473192317, 459874299, 1234179313, 310100793, 462420179, 493037813, 2191197944L, 1952957179, 274194067, 1631433770, 1339086078, 330429183, 1512455426, 1254659041, 994528004, 257819397, 979113734, 52129033, 916466954, 558750987, 633376012, 285534991, 485930257, 319402270, 50559251, 2291309870L, 2327729430L, 2877134615L, 45484313, 15776303, 93112282, 1466097438, 121465119, 2556173600L, 424045345, 1300592930, 1319443339, 2478704934L, 1582926121, 250162474, 2570976043L, 621293868, 1105416590, 999547694, 2183636785L, 1245671730, 582852483, 138454325, 100458294, 1704544057, 90569603, 1467962250, 420352830, 193679211, 290508721, 2297369923L, 504731972, 440258771, 2490824007L, 35056456, 173556553, 1248684362, 2196165451L, 1482603852, 54525773, 1195274574, 2514239312L, 1445058385, 306213202, 262932110, 529622870, 243264343, 558772413, 2203345754L, 248774714, 371962717, 1677122564, 168476512, 76908897, 2588866309L, 2485256251L, 2848975872L, 1266567530, 2358424939L, 80327968, 1849873267, 731956597, 363139446, 90712884, 2334087828L, 2314826107L, 2846436074L, 1619859326, 23930200, 840177210, 828259716, 58260903, 217323400, 1480950506, 785527178, 2845611159L, 627093902, 433618925, 552473488, 903369618, 449800992, 260727189, 1639214900, 2410386813L, 2200238490L, 144501148, 1122959527, 307587774, 2559505824L, 315333537, 88616411, 245822883, 41002916, 56147377, 629084145, 1587065822, 2604372636L, 212810156, 480303090, 2236178352L, 268174769, 919469490, 235656116, 415753384, 14478263, 366863800, 2533547450L, 15221663, 2499901884L, 833501941, 1712882113, 31579586, 2591794627L, 2468750082L, 2471206853L, 2436408774L, 2496523207L, 16816972, 2367105482L, 2750254825L, 215337932, 863180749, 912087812, 2648970061L, 2430944208L, 797598200, 2218490324L, 278511061, 253633235, 2277491161L, 2153768641L, 2765566939L, 1197354972, 1327441550, 471718879, 2537220960L, 486139633, 900424675, 459815396, 1140943333, 68333543, 622857704, 193718183, 1899817962, 238501031, 412042220, 153876973, 561913597, 1254708720, 265553905, 2813797362L, 81321972, 424045046, 2799808681L, 2688358904L, 95157242, 97457147, 29109718, 849421310]

#params["screen_name"] ="" #optional
withheld_flag = False

def get200(user_ids, output_file):

    """
    This function gets the first 200 tweets from a user 
    
    @inputs: None
    @outputs: string "stop" if the user has less than 200 tweets, 
              otherwise return the last tweet ID
    """

    counter = 1
    for user in user_ids:

        # updating cursor each time, retrieve up to 75,000 followers
        # store all followers
        followers = []
        # default cursor value
        cursor = -1

        try:

            while (cursor != 0):

                if cursor != -1:
                    # follow rate limitation, wait for 60s
                    time.sleep(60)
                
                url = APIUrl
                params = {"oauth_version":"1.0","oauth_nonce": oauth2.generate_nonce(),"oauth_timestamp":int(time.time())}
                params["oauth_consumer_key"] = consumer.key
                params["oauth_token"] = token.key
                params["user_id"] =int(user)
                params["cursor"] = cursor
                params["stringify_ids"] = ""#optional
                params["count"]=5000 
                
                req = oauth2.Request(method="GET", url=url, parameters=params)
                signature_method = oauth2.SignatureMethod_HMAC_SHA1()# HMAC, twitter use sha-1 160 bit encryption
                req.sign_request(signature_method, consumer, token)
                headers = req.to_header()
                url = req.to_url() 
                response = urllib2.Request(url)
                data = json.load(urllib2.urlopen(response))#format results as json
                

                cursor = data['next_cursor']

                print "current cursor is ", cursor
                print 'this cursor returns ',len(data["ids"]), ' number of followers'

                """
                    ATTENTION: in case we are interested in all users

                """

                followers += data["ids"]

            # outside the while loop
            print user, ' has ',len(followers), ' number of followers'
            #print user, ' has followers: ', followers
            f.write(str(user)+':')
            for item in followers:
                f.write("," + str(item))
            f.write('\n') # python will convert \n to os.linesep



        except Exception, ex:
            print ""
            print "This user probably does not exist any more."
            print 'Exception: ' + str(ex)

        finally:
            print "this is " + str(counter) + " user"
            counter += 1
            print "take 60s rest....."
            time.sleep(60)
            

def searchUser(mylist):
    """
    This function gets all tweets from all users in userlist

    @inputs:  a list of userIDs (if you want to search only one user at index i, 
              the input should look like list[i:i+1])
    @outputs: None   
    
    """
    count = 1
    for user in mylist:
        print  "current user id is ", user
        print "this is the " + str(count) + "th user----++++++" 
        count += 1
        try:
            first_id, user = get200(user)
            repeat200(first_id, user) 
        except Exception, e:
            print "got an Exception"
            print e
            # write protected user ID to a seperate file 
            print str(user), " is a protected user ###########"
            outfile_protected.write( str(user)  + " \n")  # python will convert \n to os.linesep
        finally:
            print "finish searching user ", user
            if withheld_flag:
                print str(user), " is a withheld user ###########"
                outfile_withheld.write( str(user)  + " \n")
            else:
                print str(user), " is not a withheld user" 

            # set withheld_flag to false again
            global withheld_flag
            withheld_flag = False    
            print "============================================="
        #first_id="stop"
    # is there another way other than dumping all json data into file in one call?   
    json.dump(ALL_data, outfile, sort_keys = True, indent = 4)
    # close all files
    outfile.close() 
    outfile_protected.close()
    outfile_withheld.close()

    print "finish searching all users"
    print "===================================================="

def load_file(filename):
    """
    A helper function that returns an iterable object

    """
    inputJson=open(filename, "r").read()
    jsonFields=json.loads(inputJson)
    #tweets_count=+len(jsonFields)
    
    return jsonFields

def printWithheld(filename):
    """
    Print the number of tweets that have withheld_in_countries fields

    """

    tweets=load_file(filename)
    print "total number of tweets is ", len(tweets)
    i=0
    for t in tweets:
        if "withheld_in_countries" in t:
            #print t["withheld_in_countries"]
            i+=1
    print "total number of withheld_in_countries tag is " ,i
    print "================================================="


def loadUserList(filename):
    with open(filename) as f:
        lines = [line.rstrip('\n') for line in f]
    return lines


if __name__ == '__main__':


    
    """ IMPORTANT !!! """
    #FILE_NAME = "0_16000"
    ## open a new file
    #outfile = open(FILE_NAME + ".txt", "w")
    #outfile_protected = open(FILE_NAME + "_protected_user.txt", "w")
    #outfile_withheld = open(FILE_NAME + "_withheld_user.txt", "w")
    
    #searchUser(userlist)           # for testing purpose, pick up a random user
    #printWithheld(FILE_NAME + ".txt")
    
    #userlist = [2848975872L, 466671618, 558454789, 401338374, 834953227, 1142467586, 2506303503L, 474761233, 14362642, 1444655126, 436910103, 1677122564, 1900226587, 488527901, 166875166, 270061599, 1462664562, 223710555, 1876217893, 149159975, 188325932, 207990830, 41867311, 1946548272, 486711345, 1109059640, 2212419642L, 249511995, 73977917, 10946622, 479230017, 572737928, 434423875, 2598641738L, 296493118, 1350084686, 21065809, 484946003, 174303316, 384917592, 366974308, 506314843, 2209976418L, 237166691, 2742331501L, 108374127, 172064882, 15908981, 35972039, 35831145, 74375289, 31712618, 716079235, 484964484, 574326917, 29109718, 383995927, 597289103, 15585424, 2440132755L, 80359572, 208703637, 78876832, 124954787, 359004324, 1285105831, 49172648, 2799808681L, 104204460, 1583138989, 601948336, 558772413, 2286995652L, 818202823, 21608650, 159428811, 622635213, 226146514, 462420179, 2491226329L, 2365038810L, 132573403, 50155740, 754129117, 244343014, 207657193, 14407914, 16609515, 253633235, 493037813, 24314103, 17842426, 1631433770, 458604801, 101517570, 47382788, 225726730, 2336942347L, 424255759, 595603729, 50559251, 2496854293L, 2188186329L, 45484313, 55521563, 498192670, 121465119, 1396379244, 1300592930, 2478704934L, 621293868, 19759409, 1498746487, 516100406, 179351870, 240390465, 454947138, 504731972, 81148229, 47878471, 1248684362, 335239503, 306213202, 1875583316, 1105416590, 118024534, 18383195, 359485788, 66691421, 76908897, 246944099, 1969015526, 881185128, 296079726, 400030066, 2279174516L, 1934344254, 409241975, 15866233, 2314826107L, 2846436074L, 260727189, 23930200, 2221631875L, 283156870, 2348853313L, 296749448, 785527178, 24973710, 116244879, 379758659, 20402581, 486448196, 2200238490L, 144501148, 212810156, 484018605, 18516400, 17633714, 2595916214L, 484291000, 2499901884L, 1712882113, 502071749, 43712967, 2367105482L, 433618925, 53031375, 82956754, 38832596, 2464475908L, 178315001, 45513177, 321659355, 1562053086, 100127201, 459815396, 153876973, 27273711, 344619505, 2824024564L, 797598200, 931850324, 167182842, 450808316, 28494334, 2673011204L, 615864844, 52027918, 89022992, 485696018, 54047252, 2828272150L, 994528004, 263006749, 620296965, 492950054, 56147377, 30214697, 1633522219, 2668972591L, 16689712, 2473204274L, 2416163593L, 97600057, 2306228796L, 924283892, 429617727, 2696718914L, 274926148, 1875581509, 485667398, 2796884552L, 157020940, 2156364362L, 143968844, 1466995280, 389770680, 44841556, 954739286, 2809635415L, 477811288, 469619289, 150307419, 578277980, 487955043, 2248735334L, 53034769, 137482856, 1039252075, 987505262, 2384869999L, 853088881, 223348158, 49271414, 1597096567, 1875260180, 731636346, 37161596, 2741967485L, 14584447, 508164737, 37995138, 182176389, 493355457, 159998357, 2321035915L, 2421721740L, 297947789, 66581134, 2744267408L, 32162450, 2334087828L, 2493044713L, 15268506, 146768539, 2437610144L, 264104614, 1449507504, 932944561, 238501031, 944195358, 214237884, 75193022, 366863800, 187465846, 53035720, 19235529, 2530413259L, 558521037, 350747343, 79925971, 52462292, 80919253, 1303136983, 177156824, 2259202777L, 515447515, 1383135966, 486629157, 16411361, 404832998, 1480950506, 2335279855L, 576791280, 61270769, 560526071, 1952957179, 2164710140L, 309515005, 330429183, 1530409729, 2468750082L, 50246443, 1909428996, 967369477, 53037830, 1876081416, 3078921, 100426508, 459874299, 53033746, 14222100, 70888214, 2277491161L, 2480085786L, 2441622300L, 493200158, 734657311, 1614704773, 424045345, 25080283, 54081329, 338928425, 2570976043L, 999547694, 246778672, 90712884, 2795825976L, 310100793, 323160891, 819516222, 1457705798, 173556553, 16816972, 2648970061L, 2794785592L, 1926626131, 386771797, 558779223, 2203345754L, 371962717, 343221086, 2537220960L, 890323814, 502098794, 200274798, 1589038464, 95509363, 2821346164L, 420352830, 1169751188, 612490107, 79094653, 2164630398L, 90569603, 486734725, 36012935, 1254696428, 1467962250, 28888215, 552473488, 903369618, 1920936852, 17831406, 635478934, 2444047854L, 1922276251, 1122959527, 2745676705L, 488711075, 589323173, 86129574, 104121841, 88477170, 57809840, 821331486, 485716927, 16458689, 380329513, 2496523207L, 2283353035L, 215337932, 150598818, 54525773, 2430944208L, 2688358904L, 24691666, 2583132323L, 256780037, 275536855, 53037220, 2765566939L, 245173212, 322054650, 70462431, 2852074465L, 900424675, 24210409, 449036455, 17882093, 14500848, 2789741443L, 2813797362L, 1957235700, 95157242, 20966395, 177890300, 431155014, 152441856, 2457031682L, 929938435, 613682180, 101988524, 2344193034L, 243264343, 25492496, 5499922, 344569347, 1120713902, 1152220188, 199463965, 15326241, 811252771, 32408612, 2212340778L, 134224940, 250147885, 2162613295L, 251132976, 486585393, 18138164, 627093902, 2864129081L, 20479038, 356682816, 612289601, 81720388, 121631815, 486835275, 222155852, 209976397, 511251534, 2369907793L, 155462740, 406826073, 121173085, 498533472, 1678077025, 33672294, 350968935, 1461636200, 1466274925, 983395976, 742016113, 60570739, 291001461, 94332778, 2847368321L, 414016645, 62569606, 2713973953L, 1912792202, 16944663, 437650573, 2714995856L, 485782675, 23600276, 402183317, 2845611159L, 2393298072L, 467502233, 2754247836L, 271985821, 750632095, 590312609, 1416828066, 118342823, 415753384, 63329452, 240862382, 435502255, 2171880624L, 484938930, 1849873267, 1485499573, 606698678, 2770046137L, 1888191674, 1685304512, 591146177, 174820548, 1023460549, 1570200775, 42833101, 512227533, 2536649936L, 437525713, 1085906131, 805618063, 2329025755L, 538856668, 309648615, 350303464, 1629502704, 522321139, 281906421, 556649719, 109491412, 1133137146, 2579743999L, 93601026, 34282758, 53698433, 52129033, 23876874, 558750987, 633376012, 16553230, 20192527, 2224491793L, 1875774738, 486562691, 1942013204, 2327729430L, 16137497, 2375716122L, 15776303, 1955325212, 2556173600L, 293688609, 1533668642, 44592420, 16389414, 132097320, 2459607260L, 250162474, 1588260140, 760957490, 2744280968L, 53036340, 138454325, 329952566, 224687417, 325793082, 388408640, 2324350056L, 85339458, 86836547, 485528902, 147832136, 486810954, 2285289534L, 1482603852, 1875764558, 1612719440, 334617939, 912087812, 297137496, 356547931, 27995488, 486942049, 860589410, 14493027, 138196324, 288093542, 104478609, 470801768, 26159676, 2549917034L, 2358424939L, 1004850542, 44324207, 426538354, 1108426099, 731956597, 99067254, 2688572791L, 2741698794L, 511585664, 18951555, 55143812, 2207430032L, 102442385, 1876110738, 2559505824L, 22668187, 58260903, 798122, 455454124, 382299568, 268174769, 919469490, 125699508, 2353079736L, 2533547450L, 1679504827, 93773245, 1876501950, 73270719, 2591794627L, 2436408774L, 23420360, 532381129, 608920823, 313341388, 486880717, 23954895, 1904352720, 829842900, 278511061, 48655108, 540397015, 21280216, 88616411, 2809554398L, 78568928, 2587316816L, 189208035, 15816164, 622857704, 193718183, 808173036, 1875537390, 1254708720, 548845041, 187588082, 485807610, 2399241728L, 2242439771L, 1176722947, 355083780, 55166469, 1512455426, 36880984, 1653394963, 174730774, 2772833815L, 1875500574, 27565882, 2382457435L, 290508721, 614360617, 494009898, 2493484596L, 1875770934, 51030297, 916466954, 1572384318, 2596781636L, 2389929542L, 794687047, 16784971, 743265872, 2745658962L, 51197523, 18794068, 33893974, 25237079, 559799896, 2278184538L, 582852483, 16131683, 323597924, 1160670822, 10339942, 2742429289L, 980960875, 1977767532, 1076354671, 172908144, 417564276, 503676533, 381652598, 374556279, 1281437306, 1875584636, 2797409917L, 22978174, 256702081, 64777858, 265553905, 1266313153, 154588808, 1249556076, 277083789, 262932110, 2674087567L, 381159056, 14921361, 274194067, 113904921, 2282512027L, 163638941, 748222111, 1722848880, 40615588, 64091814, 1281326761, 9221802, 503756459, 2464708274L, 465446581, 27416249, 160857786, 1864158907, 486760124, 115123902, 80327968, 172768971, 84215501, 37193424, 19266960, 136736469, 440860374, 2292913879L, 2219884248L, 748134108, 57480826, 2756408664L, 254664423, 519233256, 92695164, 873385706, 2182130019L, 593374187, 486139633, 2191197944L, 76013305, 89886458, 561913597, 2588866309L, 979113734, 1293459073, 22480651, 27452134, 1358558509, 808902416, 142300945, 319402270, 2793148179L, 47859478, 52809495, 2262646554L, 1466097438, 16049954, 1875662629, 158059731, 2495297321L, 487577386, 2475286316L, 2183636785L, 87615282, 1876158259, 1639214900, 100458294, 1704544057, 280540986, 585260861, 301328193, 1190496907, 146943812, 440258771, 1254659041, 42369676, 97388365, 273747791, 20483921, 118964050, 473151459, 152233812, 529622870, 20930398, 394123103, 168476512, 74329959, 129120104, 87609686, 91320170, 193679211, 60860438, 323938158, 65636379, 105183092, 836533225, 16244603, 1619859326, 109148031, 14251791, 2396315521L, 2460555139L, 217323400, 2724623341L, 186335121, 606281620, 14317462, 154861464, 595924889, 142342047, 41002916, 1039687591, 125417385, 480303090, 377226909, 2518320456L, 65724344, 1436052468, 38817727, 55371713, 366694338, 2471206853L, 270489544, 85331916, 863180749, 22259704, 1874730782, 93112282, 1197354972, 53534686, 262340575, 2575163360L, 819171, 2725232612L, 1470861990, 68333543, 66964476, 2367834092L, 302460909, 2736887790L, 97457147, 629084145, 800276466, 81321972, 2375694327L, 518381560, 67049467, 486690813, 14241791]
    """=============== CHANGE FILE_NAME FIRST ==============="""    
    FILE_NAME = "TurkishElectionFollowers_3.txt"
    """======================================================"""
    #userlist = loadUserList("../preprocessing/nobot_all_user.txt")[:2000]
    userlist =  [u'1578082825', u'3230879243', u'2613214415', u'1408294633', u'2324128304', u'1483299756', u'3300497986', u'2826531256', u'488669140', u'3180265517', u'3149317209', u'425902884', u'90832668', u'632308321', u'145583284', u'2438241031', u'1455117540', u'3010462265', u'198859248', u'288441724', u'3182190665', u'400703948', u'2823317613', u'2960580652', u'2931021585', u'2355294621', u'3295590526', u'3056573804', u'1554233054', u'861784736', u'2267197400', u'587380657', u'2869125825', u'139198282', u'1557721236', u'326006982', u'1393301846', u'1617663259', u'25300494', u'2967617620', u'2283941400', u'501111644', u'3133191406', u'189991294', u'935188135', u'2470862060', u'2400010513', u'543804360', u'229946009', u'3300521493', u'1488196764', u'2813390505', u'324761018', u'1468619406', u'3028089857', u'274115859', u'708984757', u'3338298293', u'3093958562', u'3186645832', u'2269410145', u'1124374820', u'1435111080', u'3108807773', u'1056099690', u'2365775750', u'3088835865', u'2948707541', u'1278356076', u'295216126', u'3342833007', u'89407359', u'3309923481', u'3115265481', u'2274399720', u'545146690', u'3311174254', u'916764116', u'2971850656', u'3093759351', u'529252052', u'2367788019', u'2796629637', u'3236542976', u'2430282864', u'290680978', u'3051132234', u'1657980030', u'266119696', u'3254744199', u'3070173701', u'3318534551', u'3039586629', u'2763943629', u'2321075826', u'140005190', u'1852301395', u'2206435143', u'1086733944', u'1478321059', u'3134264681', u'2369370511', u'2879658359', u'2411166604', u'3309153340', u'18841086', u'223401306', u'1516642140', u'3305585488', u'453948496', u'403162423', u'2471732741', u'61420820', u'1531645224', u'2636989576', u'1898068646', u'610705403', u'159374570', u'2656469315', u'3240493421', u'55931558', u'534923058', u'3093765956', u'3035225309', u'477967998', u'3107775161', u'2575072295', u'298420496', u'937928418', u'2787092860', u'2926914088', u'3131533629', u'3134514717', u'234835535', u'2425831956', u'348969538', u'435713225', u'3295391110', u'431685975', u'223648892', u'3060195898', u'773522234', u'363668882', u'632921874', u'3245501236', u'3133367361', u'2219184740', u'3028686497', u'299717804', u'2331905587', u'397173386', u'77979777', u'302810710', u'1638806893', u'261213337', u'2873735931', u'1395583021', u'3340104179', u'477141373', u'1667019888', u'1398313700', u'3129482685', u'2760829047', u'478234954', u'2161784431', u'381499746', u'479002214', u'92289371', u'2889219268', u'324298343', u'2175861430', u'476129032', u'1673675828', u'2930380084', u'557571130', u'413049824', u'108722820', u'2242689398', u'1480337244', u'326736769', u'197727842', u'1534842866', u'3206049900', u'337580652', u'3310812095', u'321693960', u'604002627', u'544330009', u'318675850', u'602098064', u'2250433248', u'187935280', u'1339363435', u'475262479', u'256000330', u'2820393501', u'2721640627', u'151500812', u'2907606317', u'157776558', u'2425598824', u'155269276', u'370722387', u'2814755311', u'2898164351', u'1216740818', u'1492382737', u'1731656120', u'211646555', u'3138451690', u'256442158', u'342957283', u'2293151024', u'337634665', u'2341069697', u'2536970509', u'3152710312', u'2647809286', u'542763865', u'88051224', u'1596115681', u'2850598136', u'2989496431', u'2860005897', u'1935681498', u'3067362321', u'2585116138', u'1271980398', u'2734417245', u'3031735394', u'2889026057', u'2977061915', u'2820740140', u'2802896231', u'248655424', u'3221160586', u'3137052436', u'2312676440', u'2402005472', u'434747238', u'2849671287', u'458354151', u'409827769', u'3342148618', u'1055987730', u'495171288', u'102347995', u'3094713861', u'2169778733', u'3159269224', u'160705185', u'386261169', u'2688444005', u'2966390097', u'1734803929', u'3310238908', u'2501229938', u'1043184234', u'3310601176', u'1919452183', u'2160287471', u'799876956', u'607215195', u'908305256', u'170109701', u'3307124392', u'485639704', u'549262995', u'2405594259', u'226884824', u'1063962373', u'614541245', u'1473039127', u'2329426460', u'2738948925', u'338213819', u'1416025566', u'441644377', u'2282116112', u'307991571', u'428841793', u'2442256107', u'496123353', u'202295472', u'186013697', u'2819730768', u'125322253', u'740930114', u'177187090', u'3055703471', u'92986521', u'3126870176', u'3043554742', u'2391584437', u'2809094293', u'989512490', u'2813913383', u'324394039', u'3005418543', u'2703822957', u'2882277809', u'1480651020', u'807622969', u'306300519', u'400098623', u'2370511778', u'1319028218', u'2940995901', u'3228536823', u'2901041026', u'349894042', u'332796294', u'537517677', u'529246050', u'3291576141', u'2450429919', u'3288249345', u'361400392', u'2282535014', u'296853721', u'2453029823', u'2155672412', u'1369700779', u'2387361427', u'195274292', u'296695166', u'261318029', u'2399962264', u'358965839', u'1592070637', u'1965375776', u'3300767441', u'3121899232', u'320159832', u'2870936938', u'2706954461', u'620935273', u'704486834', u'2270585604', u'2968219365', u'2225934435', u'548543882', u'318384101', u'2823128829', u'336017300', u'1010175931', u'565516464', u'269379208', u'987000806', u'18607423', u'2830526400', u'82314509', u'200537641', u'57371793', u'3331296370', u'273648929', u'2664962855', u'2930136232', u'2265541635', u'428533317', u'3043381677', u'548272277', u'61475946', u'367705932', u'229487149', u'121826958', u'2922868647', u'1694948700', u'50231784', u'1690515350', u'469393101', u'2569394666', u'228163594', u'471388637', u'2425986421', u'1593410155', u'387161389', u'2354363002', u'2816108855', u'2491450418', u'3256247345', u'3300930309', u'2170741113', u'1219035668', u'2457616865', u'2762822781', u'226915422', u'203207506', u'3056116541', u'2453476524', u'180441198', u'2200919997', u'333055199', u'837395797', u'3091478521', u'61459857', u'1595242284', u'2866130302', u'943747681', u'2800740563', u'131816515', u'255904898', u'301748327', u'152621713', u'3323565345', u'1136775710', u'1480729566', u'2972683013', u'467310608', u'1506556543', u'1476960972', u'3308377246', u'2835531743', u'81055653', u'2243848588', u'3262202255', u'1729773516', u'1155348974', u'1020184040', u'2489610818', u'602104395', u'249337809', u'2957499202', u'257382963', u'346525975', u'1473199284', u'143748730', u'131137515', u'318066060', u'2507010778', u'2495707426', u'199999545', u'1373158950', u'2950466013', u'3093245980', u'3131488024', u'2666636011', u'1208284759', u'3037950275', u'3291838887', u'254102505', u'1038138554', u'1625618322', u'3073976679', u'2567026829', u'2329930457', u'496762984', u'2956232351', u'377983356', u'1596554270', u'1104763698', u'3337373938', u'2646530890', u'2727112811', u'3138891399', u'230435962', u'2734487861', u'1894132206', u'2747101510', u'469755554', u'2948707889', u'78096961', u'3226957798', u'1286464922', u'293580185', u'2813740955', u'82957701', u'341594336', u'791930078', u'801979705', u'3147368051', u'2977814471', u'2821222025', u'3234270117', u'3312091571', u'352284402', u'1494088338', u'711294554', u'3027734419', u'3302546103', u'1531109664', u'3306133547', u'3010107401', u'3147482706', u'2827549234', u'477870648', u'3021693017', u'980101447', u'2287455262', u'271368523', u'2574885724', u'76424015', u'2592851357', u'402345111', u'2710496708', u'968851322', u'613420465', u'1517039612', u'2565938464', u'2219263779', u'3141527907', u'414128153', u'794363192', u'2965856032', u'3160958913', u'266501657', u'459214435', u'3305157970', u'553894428', u'2732758276', u'182978952', u'3306720514', u'449628989', u'2971370008', u'1454284777', u'3126719943', u'1931991457', u'373261104', u'2874121663', u'1716803791', u'709124770', u'21697228', u'1423939694', u'3342560219', u'3312284721', u'3044194166', u'3311201926', u'405387961', u'1009740732', u'282090295', u'2837399020', u'342656294', u'832946244', u'3248173823', u'354941385', u'2825894841', u'3115742345', u'635650158', u'2849619365', u'2401041170', u'3043922668', u'2216268045', u'3339962931', u'1514589348', u'3236067383', u'2518761755', u'424566105', u'330507395', u'272908929', u'312229888', u'3111644488', u'321283148', u'250676182', u'2938935796', u'370285911', u'1376392560', u'283601264', u'487660585', u'3313100511', u'2824696965', u'539262532', u'1716638810', u'1421834126', u'463622703', u'2832479888', u'460218055', u'1436707453', u'432800164', u'3295197825', u'221170045', u'2849840864', u'1238407723', u'247180060', u'627270851', u'3314946713', u'1409839926', u'2287233752', u'435022913', u'2819802593', u'3123673699', u'3084202864', u'408618373', u'288168024', u'2615424758', u'3141884825', u'2775697943', u'1288644836', u'2464744725', u'2964721733', u'333339378', u'1386624013', u'572708831', u'955939099', u'1511275538', u'189473615', u'349287474', u'2496096144', u'3088796109', u'603542476', u'3064360264', u'3306948435', u'490417568', u'2787238258', u'2927125245', u'2922916125', u'2360792420', u'3061706681', u'3309758691', u'222153461', u'406139405', u'204331196', u'812919912', u'2422198535', u'34970828', u'2720018981', u'3291734879', u'2700939031', u'269222535', u'418988777', u'1506038366', u'2799494937', u'315389482', u'3311658345', u'2148815252', u'337945290', u'1625152555', u'2865384167', u'108010600', u'1015074896', u'2661072491', u'2428733988', u'247121081', u'297299276', u'360857595', u'575427124', u'934635102', u'2953801510', u'707047694', u'2830113500', u'66362260', u'1288647019', u'591742941', u'2857307968', u'2808943270', u'391656851', u'2737183916', u'3159164668', u'517915009', u'2405960848', u'1655474942', u'162854803', u'118400345', u'612897440', u'21643400', u'2704423800', u'1335979652', u'1512907189', u'2773780093', u'429895867', u'458533827', u'1598654538', u'450977954', u'2662686115', u'234367623', u'3073962428', u'3242072848', u'1546626379', u'2984184021', u'3303636442', u'339845644', u'3313083057', u'264763123', u'2985888856', u'3300662871', u'3314942883', u'1613465966', u'295863505', u'86272073', u'2780216635', u'89165524', u'356454839', u'2447618674', u'895723237', u'107220280', u'1160425063', u'626471115', u'1568551922', u'2738840254', u'2465327433', u'637009702', u'3131711229', u'1074847350', u'3107505562', u'1582846406', u'1686894834', u'613009782', u'296454539', u'186149088', u'399078759', u'3182229585', u'240627703', u'3075524397', u'462201842', u'1470586004', u'461099597', u'225326252', u'2789686678', u'3060099657', u'2255399330', u'3165872216', u'161037892', u'701472746', u'422037961', u'2271813060', u'383660696', u'222564497', u'3067687198', u'3256636955', u'2571776029', u'202167226', u'3082398881', u'854201910', u'351094924', u'574115076', u'2355378832', u'2747987039', u'464638657', u'2912476473', u'92228488', u'531280323', u'2999682370', u'458785146', u'2846001693', u'2345745334', u'1952058576', u'487660641', u'235692936', u'1533899690', u'464186439', u'230884991', u'3288462490', u'460601641', u'386140416', u'436556288', u'58459318', u'155510368', u'1290698029', u'2505209053']
    

    print len(userlist)

    f = open(FILE_NAME,'w')
    

    get200(userlist[500:], f)

    f.close() # you can omit in most cases as the destructor will call it        



